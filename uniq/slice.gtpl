// generated by github.com/kazu/lonacha/structer

// Uniq is functions like a generics
// this is tuning performancem, reduce heap usage.
// Copyright 2009 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.
package {{.PkgName}}

import (
    "github.com/kazu/lonacha"
)

type {{.Name}}Slice []{{.Name}}
type {{.Name}}PtrSlice []*{{.Name}}


func(d {{.Name}}Slice) Uniq(fields ...string) {{.Name}}Slice {
	for _, field := range fields {
		switch field {
			{{range $k, $v := .Fields}}
		case "{{$k}}":
			exists := map[{{$v}}]bool{}
		
			lonacha.Filter(&d, func(i int) bool {
				if !exists[d[i].{{$k}}] {
					exists[d[i].{{$k}}] = true
					return true
				}
				return false
			})

			{{end}}
		}
	}
	return d	
}

func(d {{.Name}}PtrSlice) Uniq(fields ...string) {{.Name}}PtrSlice {
	for _, field := range fields {
		switch field {
			{{range $k, $v := .Fields}}
		case "{{$k}}":
			exists := map[{{$v}}]bool{}
		
			lonacha.Filter(&d, func(i int) bool {
				if !exists[d[i].{{$k}}] {
					exists[d[i].{{$k}}] = true
					return true
				}
				return false
			})

			{{end}}
		}
	}
	return d	
}
