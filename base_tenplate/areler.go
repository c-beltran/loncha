// Code generated by gen_boom_templat
package base_template

type GEN_ELEMENTList []GEN_ELEMENT

type GEN_ELEMENT_QUERY_INF interface {
	Origin() GEN_ELEMENTList
	ALL() GEN_ELEMENTList
	Get() GEN_ELEMENT
}

type GEN_ELEMENT_QUERY struct {
	slice      GEN_ELEMENTList
	operations []OPERATION
}

type OPERATION struct {
}

func (slice GEN_ELEMENTList) Where(op Op) (q GEN_ELEMENT_QUERY_INF) {
	eqInt := make(EqInt)
	eqString := make(EqString)
	funcs := make([]CondFunc, 0, len(op))
	for key, value := range op {
		switch v := value.(type) {
		case int:
			eqInt[key] = v
			funcs = append(funcs, eqInt.Func(slice)[0])
		case string:
			eqString[key] = v
			funcs = append(funcs, eqString.Func(slice)[0])
		}
	}

	return
}

func (eq EqInt) Func(slice GEN_ELEMENTList) (funcs []CondFunc) {
	funcs = make([]CondFunc, 0, len(eq))
	for key, _ := range eq {
		switch key {
		case "ID":
			fn := func(i int) bool {
				return slice[i].ID == eq[key]
			}
			funcs = append(funcs, fn)
		}
	}
	return
}

func (eq EqString) Func(slice GEN_ELEMENTList) (funcs []CondFunc) {
	funcs = make([]CondFunc, 0, len(eq))
	for key, _ := range eq {
		switch key {
		case "Name":
			fn := func(i int) bool {
				return slice[i].Name == eq[key]
			}
			funcs = append(funcs, fn)
		}
	}
	return
}
